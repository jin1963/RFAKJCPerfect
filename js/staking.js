// js/staking.js
import { tokenToWei, displayWeiToToken, getFriendlyErrorMessage } from './utils.js';
import { usdtAddress, kjcAddress, contractAddress } from '../config.js';

// ‡πÉ‡∏ä‡πâ window.updateUI?.() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á circular import

export async function buyAndStake() {
  if (
    !window.stakingContract || !window.account || !window.usdtContract || !window.routerContract ||
    typeof window.usdtDecimals === 'undefined' || typeof window.kjcDecimals === 'undefined'
  ) {
    alert("‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
    return;
  }

  const rawInput = document.getElementById("usdtAmount").value.trim();
  if (!rawInput || isNaN(rawInput) || parseFloat(rawInput) <= 0) {
    alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô USDT ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (> 0)");
    return;
  }

  const usdtAmountFloat = parseFloat(rawInput);
  const usdtInWei = tokenToWei(usdtAmountFloat, window.usdtDecimals);

  const $status = document.getElementById("buyTokenStatus");
  $status.innerText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ KJC‚Ä¶";
  $status.classList.remove("error", "success");

  try {
    if (!window.web3.utils.isAddress(usdtAddress) || !window.web3.utils.isAddress(kjcAddress)) {
      $status.innerText = "‚ùå ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô config.js";
      $status.classList.add("error");
      alert("‚ùå ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô config.js");
      return;
    }

    const path = [usdtAddress, kjcAddress];
    const amountsOut = await window.routerContract.methods.getAmountsOut(usdtInWei, path).call();
    const expectedKjcOutWei = BigInt(amountsOut[1]);
    const minOut = expectedKjcOutWei * 95n / 100n; // slippage 5%

    const allowance = await window.usdtContract.methods.allowance(window.account, contractAddress).call();
    if (BigInt(allowance) < BigInt(usdtInWei)) {
      $status.innerText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ USDT‚Ä¶";
      await window.usdtContract.methods.approve(contractAddress, usdtInWei).send({ from: window.account });
      $status.innerText = "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î ‚Äú‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞ Stake‚Äù ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
      $status.classList.add("success");
      alert("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ USDT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞ Stake");
      return;
    }

    $status.innerText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞ Stake‚Ä¶";
    const buyTx = await window.stakingContract.methods
      .buyAndStake(usdtInWei, minOut.toString())
      .send({ from: window.account });

    $status.innerText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‚Ä¶";
    const receipt = await window.web3.eth.getTransactionReceipt(buyTx.transactionHash);

    if (receipt && receipt.status) {
      const amt = usdtAmountFloat.toLocaleString();
      $status.innerText = `‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠ ${amt} USDT ‚Üí KJC ‡πÅ‡∏•‡∏∞ Stake ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`;
      $status.classList.add("success");
      alert(`‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠ ${amt} USDT ‡πÅ‡∏•‡∏∞ Stake ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      window.updateUI?.();
    } else {
      $status.innerText = "‚ùå ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡∏£‡∏∑‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò";
      $status.classList.add("error");
      alert("‚ùå ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡∏£‡∏∑‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò");
    }

  } catch (e) {
    const msg = getFriendlyErrorMessage(e);
    $status.innerText = `‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${msg}`;
    $status.classList.add("error");
    alert(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç: ${msg}`);
  }
}

export async function loadStakingInfo() {
  const stakeEl = document.getElementById("yourStake");
  const rewEl   = document.getElementById("yourStakingReward");

  if (!window.stakingContract || !window.account || typeof window.kjcDecimals === 'undefined') {
    if (stakeEl) stakeEl.innerText = "‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...";
    if (rewEl)   rewEl.innerText   = "‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...";
    return;
  }

  try {
    const rawStakedAmount = await window.stakingContract.methods.stakedAmount(window.account).call();
    const stakingReward   = await window.stakingContract.methods.getClaimable(window.account).call();

    const stakeDisplay = displayWeiToToken(rawStakedAmount, window.kjcDecimals);
    const rewardDisplay = displayWeiToToken(stakingReward, window.kjcDecimals);

    if (stakeEl) stakeEl.innerText = `üí∞ Your Stake: ${stakeDisplay} KJC`;
    if (rewEl)   rewEl.innerText   = `üéâ Claimable Stake Reward: ${rewardDisplay} KJC`;
  } catch (e) {
    if (stakeEl) { stakeEl.innerText = "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"; stakeEl.classList.add("error"); }
    if (rewEl)   { rewEl.innerText   = "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"; rewEl.classList.add("error"); }
  }
}

export async function claimStakingReward() {
  const $status = document.getElementById("claimStakeStatus");
  if (!window.stakingContract || !window.account) {
    if ($status) $status.innerText = "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Å‡πà‡∏≠‡∏ô";
    return;
  }

  $status.innerText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°‚Ä¶";
  $status.classList.remove("error", "success");

  try {
    const lastClaimTime = await window.stakingContract.methods.lastClaim(window.account).call();
    const claimInterval = await window.stakingContract.methods.CLAIM_INTERVAL().call();
    const now = Math.floor(Date.now() / 1000);
    const nextClaimTime = Number(lastClaimTime) + Number(claimInterval);

    if (now >= nextClaimTime) {
      $status.innerText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‚Ä¶";
      const tx = await window.stakingContract.methods.claimStakingReward().send({ from: window.account });
      const receipt = await window.web3.eth.getTransactionReceipt(tx.transactionHash);

      if (receipt && receipt.status) {
        $status.innerText = "üéâ ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Stake ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!";
        $status.classList.add("success");
        alert("üéâ ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Stake ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!");
        window.updateUI?.();
      } else {
        $status.innerText = "‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
        $status.classList.add("error");
        alert("‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    } else {
      const remainingSeconds = nextClaimTime - now;
      const mins = Math.ceil(remainingSeconds / 60);
      const hrs  = Math.floor(mins / 60);
      const mm   = mins % 60;
      const waitString = (hrs > 0 ? `${hrs} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ` : "") + `${mm} ‡∏ô‡∏≤‡∏ó‡∏µ`;
      $status.innerText = `‚è≥ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡∏Å ${waitString}`;
    }
  } catch (e) {
    const msg = getFriendlyErrorMessage(e);
    $status.innerText = `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${msg}`;
    $status.classList.add("error");
    alert(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: ${msg}`);
  }
}
